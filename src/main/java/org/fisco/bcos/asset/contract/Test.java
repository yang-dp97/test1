package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Test extends Contract {
    public static final String[] BINARY_ARRAY = {"","518252602082019150602081019050602083039250610fd4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205481526020019081526020016000206008018190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600080826040518082805190602001908083835b6020831015156110a55780518252602082019150602081019050602083039250611080565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020541415156110e557600080fd5b6002600081548092919060010191905055506002546000826040518082805190602001908083835b602083101515611132578051825260208201915060208101905060208303925061110d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550806001600060025481526020019081526020016000206000019080519060200190611195929190611367565b5060025460016000600254815260200190815260200160002060010181905550602060405190810160405280600060ff168152506001600060025481526020019081526020016000206003019060016111ef9291906113e7565b50602060405190810160405280600060ff1681525060016000600254815260200190815260200160002060040190600161122a9291906113e7565b50602060405190810160405280600060ff168152506001600060025481526020019081526020016000206005019060016112659291906113e7565b50602060405190810160405280600060ff168152506001600060025481526020019081526020016000206006019060016112a09291906113e7565b50602060405190810160405280600060ff168152506001600060025481526020019081526020016000206007019060016112db9291906113e7565b50602060405190810160405280600060ff168152506001600060025481526020019081526020016000206008019060016113169291906113e7565b5050565b828054828255906000526020600020908101928215611356579160200282015b8281111561135557825182559160200191906001019061133a565b5b5090506113639190611439565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113a857805160ff19168380011785556113d6565b828001600101855582156113d6579182015b828111156113d55782518255916020019190600101906113ba565b5b5090506113e39190611439565b5090565b828054828255906000526020600020908101928215611428579160200282015b82811115611427578251829060ff16905591602001919060010190611407565b5b5090506114359190611439565b5090565b61145b91905b8082111561145757600081600090555060010161143f565b5090565b905600a165627a7a7230582079fd996aabbc3c1803908bf705cc3dcd2eab10f5e6a4020b259a15c3e0666c020029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","6113e7565b5050565b60608060016000848152602001908152602001600020600301600160008581526020019081526020016000206004018180548060200260200160405190810160405280929190818152602001828054801561106257602002820191906000526020600020905b81548152602001906001019080831161104e575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156110b457602002820191906000526020600020905b8154815260200190600101908083116110a0575b5050505050905091509150915091565b60006060600254600160008581526020019081526020016000206006018080548060200260200160405190810160405280929190818152602001828054801561112c57602002820191906000526020600020905b815481526020019060010190808311611118575b5050505050905091509150915091565b600060016000838152602001908152602001600020600201549050919050565b806001600080856040518082805190602001908083835b6020831015156111985780518252602082019150602081019050602083039250611173565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020548152602001908152602001600020600201819055505050565b816001600080866040518082805190602001908083835b60208310151561122157805182526020820191506020810190506020830392506111fc565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020548152602001908152602001600020600301908051906020019061127992919061131a565b50806001600080866040518082805190602001908083835b6020831015156112b65780518252602082019150602081019050602083039250611291565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020548152602001908152602001600020600401908051906020019061130e92919061131a565b50505050565b60025481565b828054828255906000526020600020908101928215611356579160200282015b8281111561135557825182559160200191906001019061133a565b5b5090506113639190611439565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113a857805160ff19168380011785556113d6565b828001600101855582156113d6579182015b828111156113d55782518255916020019190600101906113ba565b5b5090506113e39190611439565b5090565b828054828255906000526020600020908101928215611428579160200282015b82811115611427578251829060ff16905591602001919060010190611407565b5b5090506114359190611439565b5090565b61145b91905b8082111561145757600081600090555060010161143f565b5090565b905600a165627a7a72305820234aa85562c5666732efc6a7f3030328668d49e7cbcc00508cccfeb162e6730e0029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_comcipher1\",\"type\":\"uint256[]\"},{\"name\":\"_comcipher2\",\"type\":\"uint256[]\"}],\"name\":\"comcipherin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_cipher1\",\"type\":\"uint256[]\"},{\"name\":\"_cipher2\",\"type\":\"uint256[]\"}],\"name\":\"cipherin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"comcipher2out\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"comcipher1out\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"decryptC1out\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"resultout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cipherout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_decryptC1\",\"type\":\"uint256[]\"}],\"name\":\"decryptC1in\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_pk\",\"type\":\"uint256\"}],\"name\":\"pkin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pkout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidders\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"pk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"resultin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_COMCIPHERIN = "comcipherin";

    public static final String FUNC_CIPHERIN = "cipherin";

    public static final String FUNC_COMCIPHER2OUT = "comcipher2out";

    public static final String FUNC_COMCIPHER1OUT = "comcipher1out";

    public static final String FUNC_DECRYPTC1OUT = "decryptC1out";

    public static final String FUNC_RESULTOUT = "resultout";

    public static final String FUNC_CIPHEROUT = "cipherout";

    public static final String FUNC_SUM = "sum";

    public static final String FUNC_DECRYPTC1IN = "decryptC1in";

    public static final String FUNC_PKIN = "pkin";

    public static final String FUNC_PKOUT = "pkout";

    public static final String FUNC_BIDDERS = "bidders";

    public static final String FUNC_RESULTIN = "resultin";

    public static final String FUNC_REGISTER = "register";

    protected Test(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt comcipherin(String _name, List<BigInteger> _comcipher1, List<BigInteger> _comcipher2) {
        final Function function = new Function(
                FUNC_COMCIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _comcipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _comcipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void comcipherin(String _name, List<BigInteger> _comcipher1, List<BigInteger> _comcipher2, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMCIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _comcipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _comcipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForComcipherin(String _name, List<BigInteger> _comcipher1, List<BigInteger> _comcipher2) {
        final Function function = new Function(
                FUNC_COMCIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _comcipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _comcipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_comcipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<BigInteger>, List<BigInteger>> getComcipherinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMCIPHERIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<BigInteger>, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue())
                );
    }

    public TransactionReceipt cipherin(String _name, List<BigInteger> _cipher1, List<BigInteger> _cipher2) {
        final Function function = new Function(
                FUNC_CIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _cipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _cipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void cipherin(String _name, List<BigInteger> _cipher1, List<BigInteger> _cipher2, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _cipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _cipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCipherin(String _name, List<BigInteger> _cipher1, List<BigInteger> _cipher2) {
        final Function function = new Function(
                FUNC_CIPHERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _cipher1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class)), 
                _cipher2.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_cipher2, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<BigInteger>, List<BigInteger>> getCipherinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CIPHERIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<BigInteger>, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()), 
                convertToNative((List<Uint256>) results.get(2).getValue())
                );
    }

    public Tuple2<BigInteger, List<BigInteger>> comcipher2out(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_COMCIPHER2OUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<BigInteger>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public Tuple2<BigInteger, List<BigInteger>> comcipher1out(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_COMCIPHER1OUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<BigInteger>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public List decryptC1out(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_DECRYPTC1OUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List resultout(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_RESULTOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple2<List<BigInteger>, List<BigInteger>> cipherout(BigInteger _id) throws ContractException {
        final Function function = new Function(FUNC_CIPHEROUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Uint256>) results.get(1).getValue()));
    }

    public BigInteger sum() throws ContractException {
        final Function function = new Function(FUNC_SUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt decryptC1in(String _name, List<BigInteger> _decryptC1) {
        final Function function = new Function(
                FUNC_DECRYPTC1IN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _decryptC1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_decryptC1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void decryptC1in(String _name, List<BigInteger> _decryptC1, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECRYPTC1IN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _decryptC1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_decryptC1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecryptC1in(String _name, List<BigInteger> _decryptC1) {
        final Function function = new Function(
                FUNC_DECRYPTC1IN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                _decryptC1.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_decryptC1, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<BigInteger>> getDecryptC1inInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECRYPTC1IN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public TransactionReceipt pkin(String _name, BigInteger _pk) {
        final Function function = new Function(
                FUNC_PKIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pk)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void pkin(String _name, BigInteger _pk, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PKIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pk)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPkin(String _name, BigInteger _pk) {
        final Function function = new Function(
                FUNC_PKIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pk)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getPkinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PKIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger pkout(int _id) throws ContractException {
        final Function function = new Function(FUNC_PKOUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple3<String, BigInteger, BigInteger> bidders(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_BIDDERS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<String, BigInteger, BigInteger>(
                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue());
    }

    public TransactionReceipt resultin(String _name, BigInteger _result) {
        final Function function = new Function(
                FUNC_RESULTIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_result)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void resultin(String _name, BigInteger _result, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESULTIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_result)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForResultin(String _name, BigInteger _result) {
        final Function function = new Function(
                FUNC_RESULTIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_result)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getResultinInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_RESULTIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt register(String _name) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String _name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String _name) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public static Test load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Test(contractAddress, client, credential);
    }

    public static Test deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Test.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
